{"version":3,"sources":["ult.js","treeStyle.js","ArrayBox.js","DFS.js","D3Tree.js","BFS.js","App.js","serviceWorker.js","index.js","buttonStyle.module.css","boxStyle.module.css"],"names":["sleep","milliseconds","Promise","resolve","reject","setTimeout","svgCircle","shape","shapeProps","r","stroke","fill","style","links","strokeWidth","nodes","node","circle","name","attributes","leafNode","singleStyle","visitedStyle","ArrayBox","props","data","length","className","boxStyle","box","map","ele","idx","key","margin","height","width","inOrderDFS","root","setTree","setArray","warning","a","prev","array","stack","console","log","push","children","pop","nodeSvgShape","postOrderDFS","current","defaultTree","traversalAnimations","1","2","3","4","queue","shift","D3Tree","useState","heapData","setHeap","travseralData","setTravseralData","traversalMethod","setTraversal","inputData","setInput","treeContainer","useRef","dimensions","setDimension","useEffect","getBoundingClientRect","store","addNotification","title","message","type","container","insert","animationIn","animationOut","dismiss","duration","buildTree","arr","slice","len","i","left","right","id","TextField","label","variant","onChange","event","target","value","Button","color","styles","button","onClick","dummyData","copy","split","trim","curr","validateData","size","Math","floor","random","randomNum","genernrateRandomArray","FormControl","InputLabel","Select","e","MenuItem","roundBtnDiv","roundBtn","ref","translate","x","y","orientation","textLayout","textAnchor","transform","undefined","pathFunc","transitionDuration","App","StylesProvider","injectFirst","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.538c8c28.chunk.js","sourcesContent":["export const genernrateRandomArray = () => {\n  let array = [];\n  let size = Math.floor(Math.random() * 21) + 4;\n\n  for (let i = 0; i < size; ++i) {\n    let randomNum = Math.floor(Math.random() * 1001) + 10;\n    array[i] = randomNum;\n  }\n  //   let nullval = Math.floor(Math.random() * 10);\n  //   for (let i = 0; i < size / nullval; ++i) {\n  //     let ranIdx = Math.floor(Math.random() * size);\n  //     array[ranIdx] = null;\n  //   }\n  return array;\n};\n\nexport const sleep = (milliseconds) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, milliseconds);\n  });\n};\n\nexport const checkBalance = (tree) => {};\n","export const svgCircle = {\n  shape: 'circle',\n  shapeProps: { r: 20, stroke: 'red', fill: 'red' },\n};\nexport const style = {\n  links: { stroke: 'blue', strokeWidth: 2 },\n  nodes: {\n    node: {\n      circle: {},\n      name: {},\n      attributes: {},\n    },\n    leafNode: {\n      circle: {},\n      name: {},\n      attributes: {},\n    },\n  },\n};\nexport const singleStyle = {\n  shape: 'circle',\n  shapeProps: {\n    r: 20,\n    fill: 'blue',\n  },\n};\nexport const visitedStyle = {\n  shape: 'circle',\n  shapeProps: {\n    r: 20,\n    fill: 'green',\n  },\n};\n","import React from 'react';\nimport boxStyle from './boxStyle.module.css';\nfunction ArrayBox(props) {\n  if (props.data.length !== 0) {\n    return (\n      <div className={boxStyle.box}>\n        {props.data.map((ele, idx) => {\n          return (\n            <div key={idx}>\n              <h3>{ele}</h3>\n            </div>\n          );\n        })}\n      </div>\n    );\n  } else {\n    return (\n      <div\n        style={{ margin: '5px 15px 0 15px', height: '5rem', width: '5rem' }}\n      ></div>\n    );\n  }\n}\n\nexport default ArrayBox;\n","import { singleStyle, visitedStyle } from './treeStyle';\nimport { sleep } from './ult.js';\n\nexport const inOrderDFS = async (root, setTree, setArray, warning) => {\n  let node = root;\n  let prev = null;\n  let array = [];\n\n  if (!node || node === 'undefined') {\n    warning();\n    return;\n  }\n  let stack = [];\n\n  while (stack.length || node) {\n    console.log('running in order');\n    while (node) {\n      stack.push(node);\n      if (node.children.length) node = node.children[0];\n      else node = null;\n    }\n\n    if (node !== stack[stack.length - 1]) node = stack.pop();\n    else node = null;\n    node.nodeSvgShape = singleStyle;\n    //set the array for displaying the box\n    array.push(node.name);\n    setArray([...array]);\n\n    //color effect\n    if (prev) prev.nodeSvgShape = visitedStyle;\n    prev = node;\n    setTree({ ...root });\n    await sleep(800);\n\n    if (node.children[1]) node = node.children[1];\n    else node = null;\n  }\n  //color effect\n  if (prev) prev.nodeSvgShape = visitedStyle;\n  setTree({ ...root });\n};\n\nexport const postOrderDFS = async (root, setTree, setArray, warning) => {\n  if (!root || root === 'undefined') {\n    warning();\n    return;\n  }\n  let current = root;\n  let array = [];\n  let stack = [];\n  let prev = null;\n  while (true) {\n    while (current) {\n      if (current.children[1]) stack.push(current.children[1]);\n      stack.push(current);\n      if (current.children[0]) current = current.children[0];\n      else current = null;\n    }\n    current = stack.pop();\n    if (\n      current.children[1] &&\n      stack[stack.length - 1] === current.children[1]\n    ) {\n      stack.pop();\n      stack.push(current);\n      if (current.children[1]) current = current.children[1];\n      else current = null;\n    } else {\n      current.nodeSvgShape = singleStyle;\n      array.push(current.name);\n      setArray([...array]);\n      console.log(current.name);\n      current.nodeSvgShape = singleStyle;\n      if (prev) prev.nodeSvgShape = visitedStyle;\n      setTree({ ...root });\n      await sleep(800);\n      prev = current;\n      current = null;\n    }\n    if (!stack.length) break;\n  }\n  if (prev) prev.nodeSvgShape = visitedStyle;\n  setTree({ ...root });\n};\n\nexport const preOrderDFS = async (root, setTree, setArray, warning) => {\n  let node = root;\n  let prev = null;\n  let array = [];\n\n  if (!node || node === 'undefined') {\n    warning();\n    return;\n  }\n  let stack = [root];\n\n  while (stack.length || node) {\n    node = stack.pop();\n    if (node) {\n      node.nodeSvgShape = singleStyle;\n      //set the array for displaying the box\n      array.push(node.name);\n    }\n    setArray([...array]);\n    //color effect\n    if (prev) prev.nodeSvgShape = visitedStyle;\n    prev = node;\n    setTree({ ...root });\n    await sleep(800);\n    if (node && node.children[1]) stack.push(node.children[1]);\n    if (node && node.children[0]) stack.push(node.children[0]);\n  }\n  //color effect\n  if (prev) prev.nodeSvgShape = visitedStyle;\n  setTree({ ...root });\n\n  return array;\n};\n","import React, { useState, useEffect, useRef } from 'react';\nimport Tree from 'react-d3-tree';\nimport ReactNotification from 'react-notifications-component';\nimport { store } from 'react-notifications-component';\nimport 'react-notifications-component/dist/theme.css';\nimport { sleep, genernrateRandomArray } from './ult.js';\nimport { svgCircle, style, singleStyle, visitedStyle } from './treeStyle';\nimport {\n  Button,\n  TextField,\n  Select,\n  FormControl,\n  MenuItem,\n  InputLabel,\n  IconButton,\n} from '@material-ui/core';\nimport styles from './buttonStyle.module.css';\nimport ArrayBox from './ArrayBox';\nimport { inOrderDFS, postOrderDFS, preOrderDFS } from './DFS';\nimport breathFirstSearch from './BFS';\n\nlet defaultTree = {\n  name: '1',\n  children: [],\n};\n\nconst traversalAnimations = {\n  1: preOrderDFS,\n  2: inOrderDFS,\n  3: postOrderDFS,\n  4: breathFirstSearch,\n};\n//Tree\nfunction D3Tree() {\n  //set the tree val\n  const [heapData, setHeap] = useState(defaultTree);\n  //set the travseral data for box\n  const [travseralData, setTravseralData] = useState([]);\n  //set the travseral method\n  const [traversalMethod, setTraversal] = useState(1);\n  //set the user input data\n  const [inputData, setInput] = useState([]);\n\n  const handleChange = (event) => {\n    setInput(event.target.value);\n  };\n\n  const treeContainer = useRef();\n  //set the tree in center by getting the dimensions\n  const [dimensions, setDimension] = useState({ width: 0, height: 0 });\n\n  useEffect(() => {\n    setDimension(treeContainer.current.getBoundingClientRect());\n  }, []);\n\n  const handleSelect = (e) => {\n    setTraversal(e.target.value);\n  };\n\n  //warning function for display the card\n  const warning = () => {\n    store.addNotification({\n      title: 'Wrong Input',\n      message: 'invalid input data',\n      type: 'danger',\n      container: 'top-left',\n      insert: 'top',\n      animationIn: ['animated', 'fadeIn'],\n      animationOut: ['animated', 'fadeOut'],\n      dismiss: {\n        duration: 2000,\n      },\n      width: 400,\n    });\n  };\n\n  //validate the input function\n  const validateData = () => {\n    let dummyData = [];\n    if (inputData[0] !== '[' || inputData[inputData.length - 1] !== ']') {\n      warning();\n      return false;\n    }\n\n    let copy = inputData.slice(1, inputData.length - 1).split(',');\n\n    for (let i = 0; i < copy.length; ++i) {\n      if (copy[i].trim() === 'null') {\n        dummyData.push(null);\n      } else {\n        if (copy[i] === '') {\n          warning();\n          return;\n        }\n        let curr = +copy[i];\n\n        if ((!curr && curr !== 0) || curr === '') {\n          warning();\n          return false;\n        } else dummyData.push(curr);\n      }\n    }\n    return dummyData;\n  };\n\n  //function to build a tree\n  const buildTree = async (array) => {\n    if (!array) return;\n    const arr = array.slice();\n\n    let len = arr.length;\n    let i = 0;\n    let left = 1; // i * 2 + 1;\n    let right = 2; // i * 2 + 2;\n    let node;\n    while (i < len) {\n      if (typeof arr[i] === 'object' && arr[i] !== null) {\n        node = arr[i];\n      } else {\n        if (arr[i] === null) {\n          i++;\n          continue;\n        }\n        node = { name: '' + arr[i], children: [] };\n        arr[i] = node;\n      }\n\n      if (left < len && arr[left] !== null && node !== null) {\n        node.children[0] = { name: '' + arr[left], children: [] };\n        arr[left] = node.children[0];\n\n        setHeap({ ...arr[0] });\n        await sleep(800);\n      }\n      if (right < len && arr[right] !== null && node !== null) {\n        if (!node.children[0]) {\n          node.children[0] = { name: '' + arr[right], children: [] };\n          arr[right] = node.children[0];\n\n          setHeap({ ...arr[0] });\n          await sleep(800);\n        } else {\n          node.children[1] = { name: '' + arr[right], children: [] };\n          arr[right] = node.children[1];\n\n          setHeap({ ...arr[0] });\n          await sleep(800);\n        }\n      }\n\n      i++;\n      left += 2;\n      right += 2;\n    }\n    setHeap({ ...arr[0] });\n  };\n\n  return (\n    <div id='treeWrapper' className='treeWapper'>\n      <div className='myheader'>\n        <h3>DS-Visualizer</h3>\n        <label>\n          <TextField\n            label=' Input your array:'\n            variant='filled'\n            type='text'\n            name='input'\n            className='ipttext'\n            onChange={handleChange}\n          />\n        </label>\n        <Button\n          variant='contained'\n          color='primary'\n          className={styles.button}\n          onClick={() => buildTree(validateData())}\n        >\n          Generate Tree\n        </Button>\n        <Button\n          variant='contained'\n          color='primary'\n          className={styles.button}\n          onClick={() => {\n            buildTree(genernrateRandomArray());\n          }}\n        >\n          Random Tree\n        </Button>\n        <FormControl>\n          <InputLabel id='traversal-label'>Tree Travseral</InputLabel>\n          <Select\n            className='menuitem'\n            onChange={handleSelect}\n            value={traversalMethod}\n          >\n            <MenuItem value={1}>Pre-Order-DFS</MenuItem>\n            <MenuItem value={2}>In-Order-DFS</MenuItem>\n            <MenuItem value={3}>Post-Order-DFS</MenuItem>\n            <MenuItem value={4}>Breath-First-Search</MenuItem>\n          </Select>\n        </FormControl>\n        <div className={styles.roundBtnDiv}>\n          <button\n            className={styles.roundBtn}\n            onClick={() =>\n              traversalAnimations[traversalMethod](\n                heapData,\n                setHeap,\n                setTravseralData,\n                warning\n              )\n            }\n          >\n            Go!\n          </button>\n        </div>\n        <div className={styles.roundBtnDiv}>\n          <button\n            className={styles.roundBtn}\n            onClick={async () => {\n              await setHeap(defaultTree);\n              setTravseralData([]);\n            }}\n          >\n            Clear!\n          </button>\n        </div>\n      </div>\n\n      <ReactNotification />\n\n      <ArrayBox data={travseralData} />\n      <section style={{ width: '100%', height: '100vh' }} ref={treeContainer}>\n        <Tree\n          data={heapData}\n          translate={{\n            x: dimensions ? +(dimensions.width / 2) : 0,\n            y: dimensions ? +(dimensions.height / 4) : 0,\n          }}\n          orientation='vertical'\n          textLayout={{\n            textAnchor: 'middle',\n            x: 0,\n            y: 0,\n            transform: undefined,\n          }}\n          nodeSvgShape={svgCircle}\n          styles={style}\n          pathFunc='straight'\n          transitionDuration={0}\n        />\n      </section>\n    </div>\n  );\n}\n\nexport default D3Tree;\n","import { singleStyle, visitedStyle } from './treeStyle';\nimport { sleep } from './ult.js';\nconst breathFirstSearch = async (root, setTree, setArray, warning) => {\n  let node = root;\n  let prev = null;\n  let array = [];\n\n  if (!node || node === 'undefined') {\n    warning();\n    return;\n  }\n  let queue = [root];\n\n  while (queue.length || node) {\n    node = queue.shift();\n    if (node) {\n      node.nodeSvgShape = singleStyle;\n      //set the array for displaying the box\n      array.push(node.name);\n    }\n    setArray([...array]);\n    //color effect\n    if (prev) prev.nodeSvgShape = visitedStyle;\n    prev = node;\n    setTree({ ...root });\n    await sleep(800);\n    if (node && node.children[0]) queue.push(node.children[0]);\n    if (node && node.children[1]) queue.push(node.children[1]);\n  }\n  console.log('finish bfs', array);\n  //color effect\n  if (prev) prev.nodeSvgShape = visitedStyle;\n  setTree({ ...root });\n\n  return array;\n};\n\nexport default breathFirstSearch;\n","import React from 'react';\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { StylesProvider } from '@material-ui/core/styles';\nimport styles from './buttonStyle.module.css';\n\nimport D3Tree from './D3Tree';\nfunction App() {\n  return (\n    <StylesProvider injectFirst>\n      <D3Tree />\n    </StylesProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"buttonStyle_button__17un8\",\"roundBtnDiv\":\"buttonStyle_roundBtnDiv__3J2Ia\",\"roundBtn\":\"buttonStyle_roundBtn__2F1gG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"boxStyle_box__dbMjF\"};"],"sourceRoot":""}