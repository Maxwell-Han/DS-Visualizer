{"version":3,"sources":["ult.js","treeStyle.js","D3Tree.js","App.js","serviceWorker.js","index.js"],"names":["sleep","milliseconds","Promise","resolve","reject","setTimeout","svgCircle","shape","shapeProps","r","stroke","fill","style","links","strokeWidth","nodes","node","circle","name","attributes","leafNode","singleStyle","visitedStyle","width","window","screen","height","D3Tree","useState","children","heapData","setHeap","inputData","setInput","warning","store","addNotification","title","message","type","container","insert","animationIn","animationOut","dismiss","duration","buildTree","array","a","arr","slice","len","length","i","left","right","dfs","root","prev","stack","push","pop","nodeSvgShape","id","className","onChange","event","target","value","key","onClick","dummyData","console","log","copy","split","JSON","parse","curr","validateDate","size","Math","floor","random","randomNum","genernrateRandomArray","data","translate","x","y","orientation","textLayout","textAnchor","transform","undefined","styles","pathFunc","transitionDuration","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d699e420.chunk.js","sourcesContent":["export const genernrateRandomArray = () => {\n  let array = [];\n  let size = Math.floor(Math.random() * 101) + 4;\n\n  for (let i = 0; i < size; ++i) {\n    let randomNum = Math.floor(Math.random() * 1000) + 10;\n    array[i] = randomNum;\n  }\n  //   let nullval = Math.floor(Math.random() * 10);\n  //   for (let i = 0; i < size / nullval; ++i) {\n  //     let ranIdx = Math.floor(Math.random() * size);\n  //     array[ranIdx] = null;\n  //   }\n  return array;\n};\n\nexport const sleep = (milliseconds) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, milliseconds);\n  });\n};\n","export const svgCircle = {\n  shape: 'circle',\n  shapeProps: { r: 20, stroke: 'red', fill: 'red' },\n};\nexport const style = {\n  links: { stroke: 'blue', strokeWidth: 2 },\n  nodes: {\n    node: {\n      circle: {},\n      name: {},\n      attributes: {},\n    },\n    leafNode: {\n      circle: {},\n      name: {},\n      attributes: {},\n    },\n  },\n};\nexport const singleStyle = {\n  shape: 'circle',\n  shapeProps: {\n    r: 20,\n    fill: 'blue',\n  },\n};\nexport const visitedStyle = {\n  shape: 'circle',\n  shapeProps: {\n    r: 20,\n    fill: 'green',\n  },\n};\n","import React, { useState } from 'react';\nimport Tree from 'react-d3-tree';\nimport ReactNotification from 'react-notifications-component';\nimport { store } from 'react-notifications-component';\nimport 'react-notifications-component/dist/theme.css';\nimport { sleep, genernrateRandomArray } from './ult.js';\nimport { svgCircle, style, singleStyle, visitedStyle } from './treeStyle';\n\nconst width = window.screen.width;\nconst height = window.screen.height;\n\n//Tree\nfunction D3Tree() {\n  const [heapData, setHeap] = useState([\n    {\n      name: '1',\n      children: [],\n    },\n  ]);\n  const [inputData, setInput] = useState([]);\n\n  const handleChange = (event) => {\n    setInput(event.target.value);\n  };\n\n  const warning = () => {\n    store.addNotification({\n      title: 'Wrong Input',\n      message: 'invalid input data',\n      type: 'danger',\n      container: 'top-left',\n      insert: 'top',\n      animationIn: ['animated', 'fadeIn'],\n      animationOut: ['animated', 'fadeOut'],\n      dismiss: {\n        duration: 2000,\n      },\n      width: 400,\n    });\n  };\n\n  const validateDate = () => {\n    let dummyData = [];\n    console.log(inputData[0], inputData[inputData.length - 1]);\n    if (inputData[0] !== '[' || inputData[inputData.length - 1] !== ']') {\n      warning();\n      return false;\n    }\n\n    let copy = inputData.slice(1, inputData.length - 1).split(',');\n\n    for (let i = 0; i < copy.length; ++i) {\n      if (copy[i] === 'null') {\n        dummyData.push(JSON.parse(copy[i]));\n      } else {\n        if (copy[i] === '') {\n          warning();\n          return;\n        }\n        let curr = +copy[i];\n\n        if ((!curr && curr !== 0) || curr === '') {\n          warning();\n          return false;\n        } else dummyData.push(curr);\n      }\n    }\n    return dummyData;\n  };\n\n  //function to build a tree\n  const buildTree = async (array) => {\n    if (!array) return;\n    const arr = array.slice();\n\n    let len = arr.length;\n    let i = 0;\n    let left = 1; // i * 2 + 1;\n    let right = 2; // i * 2 + 2;\n    let node;\n    while (i < len) {\n      if (typeof arr[i] === 'object' && arr[i] !== null) {\n        node = arr[i];\n      } else {\n        if (arr[i] === null) {\n          i++;\n          continue;\n        }\n        node = { name: '' + arr[i], children: [] };\n        arr[i] = node;\n      }\n\n      if (left < len && arr[left] !== null && node !== null) {\n        node.children[0] = { name: '' + arr[left], children: [] };\n        arr[left] = node.children[0];\n\n        setHeap({ ...arr[0] });\n        await sleep(800);\n      }\n      if (right < len && arr[right] !== null && node !== null) {\n        if (!node.children[0]) {\n          node.children[0] = { name: '' + arr[right], children: [] };\n          arr[right] = node.children[0];\n\n          setHeap({ ...arr[0] });\n          await sleep(800);\n        } else {\n          node.children[1] = { name: '' + arr[right], children: [] };\n          arr[right] = node.children[1];\n\n          setHeap({ ...arr[0] });\n          await sleep(800);\n        }\n      }\n\n      i++;\n      left += 2;\n      right += 2;\n    }\n  };\n\n  const dfs = async (root) => {\n    let node = root;\n    let prev = null;\n\n    if (!node || node === 'undefined') return;\n    let stack = [];\n\n    while (stack.length || node) {\n      while (node) {\n        stack.push(node);\n        if (node.children.length) node = node.children[0];\n        else node = null;\n      }\n\n      if (node !== stack[stack.length - 1]) node = stack.pop();\n      else node = null;\n      node.nodeSvgShape = singleStyle;\n\n      //color effect\n      if (prev) prev.nodeSvgShape = visitedStyle;\n      prev = node;\n      setHeap({ ...heapData });\n      await sleep(800);\n\n      if (node.children[1]) node = node.children[1];\n      else node = null;\n    }\n    //color effect\n    if (prev) prev.nodeSvgShape = visitedStyle;\n    setHeap({ ...heapData });\n  };\n\n  return (\n    <div id='treeWrapper' className='treeWapper'>\n      <div className='myheader'>\n        <h4>DS-Visualizer</h4>\n        <label>\n          Input: <input type='text' name='input' onChange={handleChange} />\n        </label>\n        <button key='bKey' onClick={() => buildTree(validateDate())}>\n          GenerateTree\n        </button>\n        <button key='aKey' onClick={() => dfs(heapData)}>\n          InorderDFS\n        </button>\n        <button\n          key='cKey'\n          onClick={() => {\n            buildTree(genernrateRandomArray());\n          }}\n        >\n          RandomTree\n        </button>\n      </div>\n      <ReactNotification />\n      <Tree\n        data={heapData}\n        translate={{ x: width / 2, y: height / 3 }}\n        orientation='vertical'\n        textLayout={{\n          textAnchor: 'start',\n          x: -5,\n          y: 0,\n          transform: undefined,\n        }}\n        nodeSvgShape={svgCircle}\n        styles={style}\n        pathFunc='straight'\n        transitionDuration={0}\n      />\n    </div>\n  );\n}\n\nexport default D3Tree;\n","import React from 'react';\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport D3Tree from './D3Tree';\nfunction App() {\n  return (\n    <div>\n      <D3Tree />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}